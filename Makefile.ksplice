ksplice-makefile := $(word $(words $(MAKEFILE_LIST)), $(MAKEFILE_LIST))
ksplice-script = $(dir $(ksplice-makefile))ksplice-obj.pl

KSPLICE_MODE ?= diff
$(if $(filter_out snap diff,$(KSPLICE_MODE)), \
  $(error Invalid KSPLICE_MODE $(KSPLICE_MODE).))
ksplice-mode-$(KSPLICE_MODE) = y

KSPLICE_ONLY_TARGETS ?= %

PHONY := __ksplice
__ksplice:

ksplice-extra = $(filter $(KSPLICE_EXTRA_MATCH),$(lib-y) $(real-objs-m) $(real-objs-y))
ksplice-objs = $(foreach o,$(1),$(o:=.KSPLICE) $(addsuffix .KSPLICE_helper,$(filter $(ksplice-extra),$(o))))

quiet_cmd_ksplice-combine = COMBINE $(@:.KSPLICE=)
cmd_ksplice-combine = $(ksplice-script) combine $@ $(filter $(call ksplice-objs,$(ksplice-link-deps)),$^)
quiet_cmd_ksplice-snap = SNAP    $(@:.KSPLICE=)
cmd_ksplice-snap = $(ksplice-script) snap $@
quiet_cmd_ksplice-diff = DIFF    $(@:.KSPLICE=)
cmd_ksplice-diff = $(ksplice-script) diff $@
quiet_cmd_ksplice-ignore = IGNORE  $(@:.KSPLICE=)
cmd_ksplice-ignore = touch $@
quiet_cmd_ksplice-cow = COW     $@
cmd_ksplice-cow = cp -a $@ $@.KSPLICE_pre
rule_ksplice-mod = $(Q)if [ -s $< ]; then echo $(<:.o.KSPLICE=) > $@; elif [ -e $@ ]; then rm -f $@; fi
quiet_cmd_ksplice-helper = HELPER  $(@:.KSPLICE_helper=)
cmd_ksplice-helper = $(ksplice-script) helper $@

ifeq ($(KERNELRELEASE),)

ifneq ($(wildcard include/linux/compile.h),)
MAKE += --old-file=include/linux/compile.h
endif
# Makefile.lib must be included before Makefile because they contain
# different filechk definitions in 2.6.12.
include scripts/Makefile.lib
include Makefile
CC := ksplice-cc.pl $(CC)
CFLAGS_KSPLICE = -ffunction-sections -fdata-sections -ksplice-cflags-api=1
CFLAGS_KERNEL += $(CFLAGS_KSPLICE)
CFLAGS_MODULE += $(CFLAGS_KSPLICE)
ksplice-mods += vmlinux
ifdef KSPLICE_BUILD_MODULES
ksplice-deps += ksplice_modpost
endif
ksplice-dirs += $(vmlinux-dirs:%=_ksplice_%)
ifdef ksplice-mode-snap
ksplice-before += prepare0 prepare scripts
endif

ksplice-vmlinux-objs = $(filter-out $(head-y),$(if $(vmlinux-all),$(vmlinux-all),$(vmlinux-objs)))
$(obj)/vmlinux.o.KSPLICE: ksplice-link-deps = $(ksplice-vmlinux-objs)
$(obj)/vmlinux.o.KSPLICE: $(call ksplice-objs,$(ksplice-vmlinux-objs)) FORCE
	$(call if_changed,ksplice-combine)
ksplice-targets += $(obj)/vmlinux.o.KSPLICE
$(ksplice-vmlinux-objs:=.KSPLICE): $(ksplice-dirs) ;

PHONY += ksplice_modpost ksplice_modinst
ksplice_modpost: $(ksplice-dirs)
	$(Q)$(MAKE) -f $(srctree)/scripts/Makefile.modpost
ksplice_modinst: $(ksplice-dirs)
	$(Q)$(MAKE) -f $(srctree)/scripts/Makefile.modinst

else	# KERNELRELEASE

ifdef KSPLICE_BUILD_MODULES
KBUILD_MODULES = 1
endif

include $(srctree)/scripts/Makefile.build
ksplice-mods += $(obj-m:.o=)
ksplice-deps += $(if $(filter $(KSPLICE_ONLY_TARGETS),vmlinux),$(builtin-target:=.KSPLICE) $(lib-target:=.KSPLICE))
ifdef KSPLICE_BUILD_MODULES
ksplice-deps += $(obj-m)
endif
ksplice-dirs += $(subdir-ym:%=_ksplice_%)

ifdef builtin-target
$(builtin-target:=.KSPLICE): ksplice-link-deps = $(obj-y)
$(builtin-target:=.KSPLICE): $(call ksplice-objs,$(obj-y)) FORCE
	$(call if_changed,ksplice-combine)
ksplice-targets += $(builtin-target:=.KSPLICE)
endif

ifdef lib-target
$(lib-target:=.KSPLICE): ksplice-link-deps = $(lib-y)
$(lib-target:=.KSPLICE): $(call ksplice-objs,$(lib-y)) FORCE
	$(call if_changed,ksplice-combine)
ksplice-targets += $(lib-target:=.KSPLICE)
endif

$(sort $(multi-used-y:=.KSPLICE) $(multi-used-m:=.KSPLICE)): ksplice-link-deps = $($(@:$(obj)/%.o.KSPLICE=%-objs):%=$(obj)/%) $($(@:$(obj)/%.o.KSPLICE=%-y):%=$(obj)/%)
$(sort $(multi-used-y:=.KSPLICE)): $(obj)/%.o.KSPLICE: $(call ksplice-objs,$(multi-objs-y)) FORCE
	$(call if_changed,ksplice-combine)
$(sort $(multi-used-m:=.KSPLICE)): $(obj)/%.o.KSPLICE: $(call ksplice-objs,$(multi-objs-m)) FORCE
	$(call if_changed,ksplice-combine)
ksplice-targets += $(sort $(multi-used-y:=.KSPLICE) $(multi-used-m:=.KSPLICE))

ifdef ksplice-mode-snap
$(obj)/%.o.KSPLICE: $(obj)/%.o FORCE
	$(if $(strip $(wildcard $<.KSPLICE_pre) $(filter $<,$?)), \
	  $(call cmd,ksplice-snap))
else
$(obj)/%.o.KSPLICE: $(obj)/%.o
	$(call cmd,ksplice-diff)
endif

$(obj)/%.lds.KSPLICE:
	$(call cmd,ksplice-ignore)

$(sort $(subdir-obj-y:=.KSPLICE)): $(ksplice-dirs) ;

endif	# KERNELRELEASE

ksplice-modnames = $(filter $(KSPLICE_ONLY_TARGETS),$(notdir $(ksplice-mods)))
ksplice-deps += $(ksplice-modnames:%=$(MODVERDIR)/%.mod.KSPLICE)
$(MODVERDIR)/%.mod.KSPLICE: $(obj)/%.o.KSPLICE
	$(rule_ksplice-mod)
.PRECIOUS: $(obj)/%.o.KSPLICE

$(obj)/%.o.KSPLICE_helper: $(obj)/%.o.KSPLICE
	$(call cmd,ksplice-helper)

define ksplice-cow-check
	$(if $(filter-out %.KSPLICE,$@), \
	  $(if $(ksplice-mode-diff), \
	    $(if $(strip $(filter-out $(PHONY),$?) $(filter-out $(cmd_$(1)),$(cmd_$@)) $(filter-out $(cmd_$@),$(cmd_$(1)))), \
	      $(if $(wildcard $@), \
		$(if $(wildcard $@.KSPLICE_pre),, \
		  $(call cmd,ksplice-cow))))))

endef

$(foreach v,if_changed if_changed_dep if_changed_rule, \
  $(eval $(v)=$$(ksplice-cow-check)$(value $(v))))

__ksplice: $(ksplice-deps) $(ksplice-dirs)
	@:

ksplice-cmd-files := $(wildcard $(foreach f,$(sort $(ksplice-targets)),$(dir $(f)).$(notdir $(f)).cmd))
ifneq ($(ksplice-cmd-files),)
$(ksplice-cmd-files): ;
include $(ksplice-cmd-files)
endif

PHONY += $(ksplice-dirs)
$(ksplice-dirs): $(ksplice-before)
	$(Q)$(MAKE) -f $(ksplice-makefile) obj=$(@:_ksplice_%=%)

PHONY += FORCE
FORCE:

.PHONY: $(PHONY)
