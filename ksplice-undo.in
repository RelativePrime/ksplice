#!/usr/bin/perl

# Copyright (C) 2008  Jeffrey Brian Arnold <jbarnold@mit.edu>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License, version 2.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA
# 02110-1301, USA.

use Getopt::Long;
use Cwd 'abs_path', 'getcwd';
use File::Basename;
use File::Copy;
use File::Path;
use File::Spec::Functions qw(:ALL);
use File::Temp qw(tempfile tempdir);
use Fatal qw(:void copy rename move chdir mkdir unlink rmtree);
use Pod::Usage;
use strict;
use warnings;
use lib 'KSPLICE_DATA_DIR';
use ksplice;
use verbose qw(:2 copy rename move chdir mkdir mkpath unlink rmtree tempfile tempdir);

my ($help, $wantversion, $debug) = (0, 0, 0);
GetOptions("help|?" => \$help,
	"version" => \$wantversion,
	"verbose|v+" => \$verbose::level,
	"debug=i" => \$debug) or pod2usage(1);

if($wantversion) {
	print $version_str;
	exit(0);
}
pod2usage(1) if($help || scalar(@ARGV != 1));

my $mid = $ARGV[0];
$mid =~ s/^ksplice[_-]//;
my $module = "ksplice_$mid";

if(! -d "/sys/module") {
	print "/sys not mounted?\n";
	exit(1);
}
if(! -d "/sys/module/$module/ksplice") {
	print "Ksplice id $mid is not present in the kernel\n";
	exit(1);
}

if($debug) {
	if(! -d "/sys/module/$module/parameters") {
		runval("echo $debug > /sys/module/$module/debug");
	}
	else {
		runval("echo $debug > /sys/module/$module/parameters/debug");
	}
}

open STAGE, '>', "/sys/module/$module/ksplice/stage" or die $!;
print STAGE "reversed\n";
close STAGE;
unless(runstr("lsmod") =~ m/- $/m or runval_raw("rmmod $module") == 0) {
	my (undef, $debugfs_out) = tempfile('ksplice-debug-XXXXXX',
					    DIR => tmpdir());
	my $debug = get_debugfs("$module", $debugfs_out);
	if (!defined($debug)) {
		my $dmesg = runstr("dmesg | grep ksplice");
		while($dmesg =~ /ksplice: Preparing to reverse/) {
			$dmesg = $';
		}
		$debug = $dmesg;
	}
	print STDERR "Error undoing Ksplice update $mid:\n";
	print "$debug";
	open(ABORT, '<', "/sys/module/$module/ksplice/abort_cause")
	    or die $!;
	chomp(my $abort_cause = <ABORT>);
	close(ABORT);
	if($abort_cause eq "code_busy") {
		print <<END

Ksplice has aborted the undo operation because it appears that the code that
you are trying to change is continuously in use by the system.  More
specifically, Ksplice has been unable to find a moment when one or more of the
to-be-changed functions is not on a thread's kernel stack.

END
	}
	if($abort_cause eq "module_busy") {
		print <<END

Ksplice has aborted the undo operation because it appears that the Ksplice
update that you are trying to unload is in use by another module.  You can
find out what module is using the Ksplice update using the lsmod command.

END

	}
	print("Debugging output saved to $debugfs_out\n");
	die;
}

exit(0);

=head1 NAME

ksplice-undo - Undo a Ksplice update that has been applied to the running kernel

=head1 SYNOPSIS

B<ksplice-undo> I<KSPLICE_ID>

=head1 DESCRIPTION

B<ksplice-undo> takes as input a Ksplice identification tag, as reported by
L<ksplice-view(8)>, and it reverses that update within the running binary kernel.

=head1 OPTIONS

=over 8

=item B<--debug>

Reverses the update with debugging output enabled.  Recommended only for
debugging.  I<DEBUG_LEVEL> should be an integer between 0 and 2.  B<--debug=2>
provides the most debugging information.

=over

=item Z<> B<0>

No debugging output.

=item Z<> B<1>

Provides basic kernel stack check debugging output.

=item Z<> B<2>

Provides full kernel stack check debugging output.

=back

=back

=head1 SEE ALSO

L<ksplice-create(8)>, L<ksplice-apply(8)>, L<ksplice-view(8)>

=head1 COPYRIGHT

Copyright (C) 2008  Jeffrey Brian Arnold <jbarnold@mit.edu>.

This is free software and documentation.  You can redistribute and/or modify it
under the terms of the GNU General Public License, version 2.

=cut
