#!/usr/bin/perl

# Copyright (C) 2008  Jeffrey Brian Arnold <jbarnold@mit.edu>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License, version 2.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA
# 02110-1301, USA.

use strict;
use warnings;
use lib 'KSPLICE_DATA_DIR';
use Ksplice;

my ($help, $wantversion, $debug) = (0, 0, 0);
GetOptions("help|?" => \$help,
	"version" => \$wantversion,
	"verbose|v:+" => \$Verbose::level,
	"debug=i" => \$debug) or pod2usage(1);

if($wantversion) {
	print $version_str;
	exit(0);
}
pod2usage(1) if($help || scalar(@ARGV) != 1);

my $kid = $ARGV[0];
$kid =~ s/^ksplice[-_]//;
$kid =~ s/[-_].*$//;
my $update = "ksplice_$kid";
my $nounload = runstr("lsmod") =~ m/- $/m;

if (!update_loaded($kid)) {
	print "Ksplice id $kid is not present in the kernel\n";
	exit(1);
}

chdir("/sys/module/");
set_debug_level($kid, $debug) if(defined($debug));
my $stage = get_stage($kid);
if ($stage ne 'applied') {
	print "Ksplice id $kid is not applied\n";
}
else {
	set_stage($kid, "reversed");
}

my $failed = 0;
foreach my $module (glob("${update}_*")) {
	$failed = 1 unless ($nounload or runval_raw("rmmod $module") == 0);
}
if ($failed == 0 && -e "/sys/module/$update") {
	$failed = 1 unless ($nounload or runval_raw("rmmod $update") == 0);
}
unless($failed == 0) {
	my ($debugfile, $debugout) = get_debug_output($kid);
	print STDERR "Error undoing Ksplice update $kid:\n";
	print $debugout;
	my $abort_cause = get_abort_cause($kid);
	print_error($abort_cause);
	print("Debugging output saved to $debugout\n");
	die;
}
exit(0);

sub print_error {
	my ($error) = @_;
	my %errors = (
		"code_busy" => <<'END',
Ksplice has aborted the undo operation because it appears that the code that
you are trying to change is continuously in use by the system.  More
specifically, Ksplice has been unable to find a moment when one or more of the
to-be-changed functions is not on a thread's kernel stack.
END
		"module_busy" => <<'END',
Ksplice has aborted the undo operation because it appears that the Ksplice
update that you are trying to unload is in use by another module.  You can
find out what module is using the Ksplice update using the lsmod command.
END
		"UNKNOWN" => <<'END',
The Ksplice kernel interface has returned an error string that
ksplice-undo does not understand.  This is probably the result of
using a version of ksplice-apply that is older than the version of the
Ksplice kernel module source.
END
		"none" => <<'END',
Ksplice has aborted the undo operation for unknown reasons.
END
);
	$error = "UNKNOWN" if (!exists $errors{$error});
	print STDERR "\n$errors{$error}\n";
}

=head1 NAME

ksplice-undo - Undo a Ksplice update that has been applied to the running kernel

=head1 SYNOPSIS

B<ksplice-undo> I<KSPLICE_ID>

=head1 DESCRIPTION

B<ksplice-undo> takes as input a Ksplice identification tag, as reported by
L<ksplice-view(8)>, and it reverses that update within the running binary kernel.

=head1 OPTIONS

=over 8

=item B<--debug>

Reverses the update with debugging output enabled.  Recommended only for
debugging.  I<DEBUG_LEVEL> should be an integer between 0 and 2.  B<--debug=2>
provides the most debugging information.

=over

=item Z<> B<0>

No debugging output.

=item Z<> B<1>

Provides basic kernel stack check debugging output.

=item Z<> B<2>

Provides full kernel stack check debugging output.

=back

=back

=head1 SEE ALSO

L<ksplice-create(8)>, L<ksplice-apply(8)>, L<ksplice-view(8)>

=head1 COPYRIGHT

Copyright (C) 2008  Jeffrey Brian Arnold <jbarnold@mit.edu>.

This is free software and documentation.  You can redistribute and/or modify it
under the terms of the GNU General Public License, version 2.

=cut
