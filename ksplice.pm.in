package ksplice;
use Cwd 'abs_path';
use File::Basename;
use File::Copy;
use File::Path;
use File::Temp qw(tempfile tempdir);
use Fatal qw(:void copy rename move chdir mkdir unlink rmtree);
use strict;
use warnings;
use verbose qw(:2 copy rename move chdir mkdir mkpath unlink rmtree tempfile tempdir);
require Exporter;
our @ISA = qw(Exporter);
our @EXPORT = qw($datadir $libexecdir $version_str runstr runval runval_raw runsuc unpack_update get_debugfs);

our ($datadir, $libexecdir) = qw(KSPLICE_DATA_DIR KSPLICE_LIBEXEC_DIR);
our $version_str = "Ksplice version PACKAGE_VERSION\n";

sub runval {
	my (@cmd) = @_;
	if(runval_raw(@cmd) != 0) {
		die "Failed during: @cmd\n";
	}
}

sub runval_raw {
	my (@cmd) = @_;
	my ($out, $err);
	print "+ @cmd\n" if($verbose::level >= 1);
	if($verbose::level < 1) {
		open $out, ">&STDOUT" or die "Can't dup STDOUT: $!";
		open $err, ">&STDERR" or die "Can't dup STDERR: $!";
		open STDOUT, '>', "/dev/null" or die "Can't hide STDOUT: $!";
		open STDERR, '>', "/dev/null" or die "Can't hide STDERR: $!";
	}
	my $val = system(@cmd);
	if($verbose::level < 1) {
		open STDOUT, ">&", $out or die "Can't restore STDOUT: $!";
		open STDERR, ">&", $err or die "Can't restore STDERR: $!";
	}
	return $val;
}

sub runstr {
	my @cmd = @_;
	print "+ @cmd\n" if($verbose::level >= 1);
	local $/;
	open PIPE, '-|', @cmd or die "Can't run @cmd: $!";
	my $output = <PIPE>;
	close PIPE or $! == 0 or die "Can't run @cmd: $!";
	return $output;
}

sub runsuc {
	my ($cmd, @args) = @_;
	my $output = runstr("$libexecdir/ksplice-$cmd", @args);
	if($? != 0) {
		print "Output: $output\n";
		die "Failed during: $libexecdir/ksplice-$cmd @args";
	}
	return $output;
}

sub unpack_update {
	my ($file) = @_;
	runval("tar", "zxf", $file);
	my ($ksplice) = glob('*/');
	chop($ksplice); # remove the trailing slash
	return $ksplice;
}

sub get_debugfs {
	my ($modname, $debugfs_out) = @_;
	my $debug;
	my $debugfsdir = tempdir('ksplice-debugfs-XXXXXX',
				 TMPDIR => 1, CLEANUP => 1);
	runval_raw(qw(mount -t debugfs debugfs), $debugfsdir);
	if (-e "$debugfsdir/$modname") {
		system(qw(cp -a), "$debugfsdir/$modname", "$debugfs_out");
		$debug = runstr("cat", "$debugfsdir/$modname");
	}
	runval_raw(qw(umount), $debugfsdir);
	return $debug;
}

END {
	$verbose::level = 0;
	chdir("/");
}

1;
